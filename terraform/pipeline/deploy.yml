parameters:
  - name: variable_file
    type: string


stages:
  - stage: TerraformPlan
    variables:
      - template: ${{ parameters.variable_file }}
    jobs:
      - job: Plan
        variables:
          - name: OTHER_SOURCE
            value: $[variables['System.PullRequest.SourceBranch']]
          - name: INDIVIDUAL_SOURCE
            value: $[variables['Build.SourceBranchName']]
          - name: IS_TAG
            value: $[startsWith(variables['Build.SourceBranch'], 'refs/tags/')]
          - name: TARGET
            value: $[variables['System.PullRequest.TargetBranch']]
        steps:
          # set the workspace variable at runtime (rather than build time) so that all the necessary variables are available, and we can use Python
          # https://learn.microsoft.com/en-us/azure/devops/pipelines/process/set-variables-scripts?view=azure-devops&tabs=bash#about-tasksetvariable
          - bash: |
              WORKSPACE=$(python terraform/pipeline/workspace.py)
              echo "##vso[task.setvariable variable=workspace;isOutput=true]$WORKSPACE"

              TAG_TYPE=$(python terraform/pipeline/tag.py)
              echo "##vso[task.setvariable variable=tag_type;isOutput=true]$TAG_TYPE"
            name: setvars
            displayName: Determine deployment environment
            env:
              REASON: $(Build.Reason)
          # https://github.com/microsoft/azure-pipelines-terraform/tree/main/Tasks/TerraformInstaller#readme
          - task: TerraformInstaller@0
            displayName: Install Terraform
            inputs:
              terraformVersion: 1.3.1
          # https://github.com/microsoft/azure-pipelines-terraform/tree/main/Tasks/TerraformTask/TerraformTaskV3#readme
          - task: TerraformTaskV3@3
            displayName: Terraform init
            inputs:
              provider: azurerm
              command: init
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
              # https://developer.hashicorp.com/terraform/tutorials/automation/automate-terraform#automated-terraform-cli-workflow
              commandOptions: -input=false
              # service connection
              backendServiceArm: deployer
              backendAzureRmResourceGroupName: $(TF_RESOURCE_GROUP)
              backendAzureRmStorageAccountName: $(TF_STORAGE_ACCOUNT)
              backendAzureRmContainerName: tfstate
              backendAzureRmKey: terraform.tfstate
          - task: TerraformTaskV3@3
            displayName: Select environment
            inputs:
              provider: azurerm
              command: custom
              customCommand: workspace
              commandOptions: select $(setvars.workspace)
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
              # service connection
              environmentServiceNameAzureRM: deployer
          - task: TerraformTaskV3@3
            displayName: Terraform plan
            inputs:
              provider: azurerm
              command: plan
              # wait for lock to be released, in case being used by another pipeline run
              # https://discuss.hashicorp.com/t/terraform-plan-wait-for-lock-to-be-released/6870/2
              commandOptions: -input=false -lock-timeout=5m -out=$(Build.ArtifactStagingDirectory)/tfplan
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
              # service connection
              environmentServiceNameAzureRM: deployer
          # need to publish the tfplan to used by next stage if it's going to run
          - publish: "$(Build.ArtifactStagingDirectory)"
            displayName: "Publish tfplan for use in TerraformApply"
            artifact: savedPlan
            condition: |
              or(
                in(variables['Build.SourceBranchName'], 'dev', 'test', 'prod'),
                eq(variables['setvars.tag_type'], 'test'),
                eq(variables['setvars.tag_type'], 'prod')
              )
  - stage: TerraformApply
    dependsOn: TerraformPlan
    variables:
      - template: ${{ parameters.variable_file }}
      - name: workspace
        value: $[ dependencies.TerraformPlan.outputs['Plan.setvars.workspace'] ]
      - name: tag_type
        value: $[ dependencies.TerraformPlan.outputs['Plan.setvars.tag_type'] ]
    # only run on dev, test, or prod branches OR if it's a tag for test or prod
    condition: |
      or(
        in(variables['Build.SourceBranchName'], 'dev', 'test', 'prod'),
        eq(variables['tag_type'], 'test'),
        eq(variables['tag_type'], 'prod')
      )
    jobs:
      - deployment: Apply
        condition: succeeded()
        environment: Approval
        variables:
          - name: workspace
            value: $[ stageDependencies.TerraformPlan.Plan.outputs['setvars.workspace'] ]
          - name: tag_type
            value: $[ stageDependencies.TerraformPlan.Plan.outputs['setvars.tag_type'] ]
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - download: current
                  displayName: "Download plan file published from TerraformPlan"
                  artifact: savedPlan
                - task: TerraformInstaller@0
                  displayName: Install Terraform
                  inputs:
                    terraformVersion: 1.3.1
                # https://github.com/microsoft/azure-pipelines-terraform/tree/main/Tasks/TerraformTask/TerraformTaskV3#readme
                - task: TerraformTaskV3@3
                  displayName: Terraform init
                  inputs:
                    provider: azurerm
                    command: init
                    workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
                    # https://developer.hashicorp.com/terraform/tutorials/automation/automate-terraform#automated-terraform-cli-workflow
                    commandOptions: -input=false
                    # service connection
                    backendServiceArm: deployer
                    backendAzureRmResourceGroupName: $(TF_RESOURCE_GROUP)
                    backendAzureRmStorageAccountName: $(TF_STORAGE_ACCOUNT)
                    backendAzureRmContainerName: tfstate
                    backendAzureRmKey: terraform.tfstate
                - task: TerraformTaskV3@3
                  displayName: Select environment
                  inputs:
                    provider: azurerm
                    command: custom
                    customCommand: workspace
                    commandOptions: select $(workspace)
                    workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
                    # service connection
                    environmentServiceNameAzureRM: deployer
                - task: TerraformTaskV3@3
                  displayName: Terraform apply
                  inputs:
                    provider: azurerm
                    command: apply
                    # (ditto the lock comment above)
                    commandOptions: -input=false -lock-timeout=5m $(Pipeline.Workspace)/savedPlan/tfplan
                    workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
                    # service connection
                    environmentServiceNameAzureRM: deployer
