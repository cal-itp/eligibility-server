trigger:
  # automatically runs on pull requests
  # https://docs.microsoft.com/en-us/azure/devops/pipelines/repos/github?view=azure-devops&tabs=yaml#pr-triggers
  branches:
    include:
      - dev
      - test
      - prod
  tags:
    include:
      - 20??.??.?*-rc?*
      - 20??.??.?*
  # only run for changes to Terraform files
  paths:
    include:
      - experiment-*

pool:
  vmImage: ubuntu-latest

stages:
  - stage: TerraformPlan
    jobs:
      - job: Plan
        variables:
          - name: OTHER_SOURCE
            value: $[variables['System.PullRequest.SourceBranch']]
          - name: INDIVIDUAL_SOURCE
            value: $[variables['Build.SourceBranchName']]
          - name: IS_TAG
            value: $[startsWith(variables['Build.SourceBranch'], 'refs/tags/')]
          - name: TARGET
            value: $[variables['System.PullRequest.TargetBranch']]
        steps:
          # set the workspace variable at runtime (rather than build time) so that all the necessary variables are available, and we can use Python
          # https://learn.microsoft.com/en-us/azure/devops/pipelines/process/set-variables-scripts?view=azure-devops&tabs=bash#about-tasksetvariable
          - bash: |
              WORKSPACE=$(python experiment-workspace.py)
              echo "##vso[task.setvariable variable=workspace]$WORKSPACE"
            displayName: Determine deployment environment
            env:
              REASON: $(Build.Reason)
          # https://github.com/microsoft/azure-pipelines-terraform/tree/main/Tasks/TerraformInstaller#readme
          - task: TerraformInstaller@0
            displayName: Install Terraform
            inputs:
              terraformVersion: 1.3.1
          # https://github.com/microsoft/azure-pipelines-terraform/tree/main/Tasks/TerraformTask/TerraformTaskV3#readme
          # - task: TerraformTaskV3@3
          - task: Bash@3
            displayName: Terraform init
            inputs:
              # provider: azurerm
              # command: init
              # workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
              # # https://developer.hashicorp.com/terraform/tutorials/automation/automate-terraform#automated-terraform-cli-workflow
              # commandOptions: -input=false
              # # service connection
              # backendServiceArm: deployer
              # # needs to match main.tf
              # backendAzureRmResourceGroupName: courtesy-cards-eligibility-terraform
              # backendAzureRmStorageAccountName: courtesycardsterraform
              # backendAzureRmContainerName: tfstate
              # backendAzureRmKey: terraform.tfstate
              targetType: inline
              script: echo "terraform init"
          # - task: TerraformTaskV3@3
          - task: Bash@3
            displayName: Select environment
            inputs:
              # provider: azurerm
              # command: custom
              # customCommand: workspace
              # commandOptions: select $(workspace)
              # workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
              # # service connection
              # environmentServiceNameAzureRM: deployer
              targetType: inline
              script: echo $(workspace)
          # - task: TerraformTaskV3@3
          - task: Bash@3
            displayName: Terraform plan
            inputs:
              # provider: azurerm
              # command: plan
              # # wait for lock to be released, in case being used by another pipeline run
              # # https://discuss.hashicorp.com/t/terraform-plan-wait-for-lock-to-be-released/6870/2
              # commandOptions: -input=false -lock-timeout=5m
              # workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
              # # service connection
              # environmentServiceNameAzureRM: deployer
              targetType: inline
              script: echo "terraform plan"
            # the plan is done as part of the apply (below), so don't bother doing it twice
            condition: notIn(variables['Build.SourceBranchName'], 'dev', 'test', 'prod')
  - stage: TerraformApply
    dependsOn: TerraformPlan
    jobs:
      - deployment: Apply
        condition: succeeded()
        environment: stageDependencies.TerraformPlan.Plan.outputs['WORKSPACE']
        strategy:
          runOnce:
            deploy:
              steps:
              - task: Bash@3
                displayName: Terraform apply
                inputs:
                  # provider: azurerm
                  # command: apply
                  # # (ditto the lock comment above)
                  # commandOptions: -input=false -lock-timeout=5m
                  # workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
                  # # service connection
                  # environmentServiceNameAzureRM: deployer
                  targetType: inline
                  script: echo "terraform apply"
                # only run on certain branches
                condition: in(variables['Build.SourceBranchName'], 'dev', 'test', 'prod')
